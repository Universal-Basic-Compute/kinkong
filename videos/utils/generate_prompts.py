import sys
from pathlib import Path
import os
from datetime import datetime
from airtable import Airtable
from dotenv import load_dotenv
import logging
from typing import Dict, Optional

# Add project root to Python path (go up two levels from videos/utils)
project_root = Path(__file__).parent.parent.parent.absolute()
if str(project_root) not in sys.path:
    sys.path.insert(0, str(project_root))

# Load .env from project root
load_dotenv(project_root / '.env')

# Now import from scripts
from scripts.analyze_charts import analyze_charts_with_claude

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

class PromptGenerator:
    def __init__(self):
        load_dotenv()
        self.base_id = os.getenv('KINKONG_AIRTABLE_BASE_ID')
        self.api_key = os.getenv('KINKONG_AIRTABLE_API_KEY')
        self.signals_table = Airtable(self.base_id, 'SIGNALS', self.api_key)

    def get_latest_signal(self) -> Optional[Dict]:
        """Get the latest high-confidence BUY signal"""
        try:
            # Query for BUY signals with high confidence
            records = self.signals_table.get_all(
                formula="AND(" +
                    "{type}='BUY', " +           # Changed from 'signal' to 'type'
                    "{confidence}='HIGH', " +     # High confidence signals
                    "IS_AFTER({createdAt}, DATEADD(NOW(), -1, 'days'))" +  # Last 24 hours
                ")",
                sort=[('createdAt', 'desc')]  # Get most recent first
            )
            
            if not records:
                logger.warning("No recent high-confidence BUY signals found")
                return None
                
            # Get the most recent signal
            signal = records[0]['fields']
            logger.info(f"Found signal for {signal.get('token')} with {signal.get('confidence')} confidence")
            return signal
            
        except Exception as e:
            logger.error(f"Error fetching signals: {e}")
            return None

    async def generate_video_script(self, signal: Dict) -> Optional[str]:
        """Generate a video script using Claude"""
        try:
            # Prepare context for Claude
            token_info = {
                'token': signal.get('token'),
                'mint': signal.get('mint'),  # Add mint address
                'analysis': f"""
                    Token: {signal.get('token')}
                    Signal: {signal.get('type', 'BUY')}
                    Strategy: {signal.get('strategy')}
                    Timeframe: {signal.get('timeframe')}
                    Confidence: {signal.get('confidence')}
                    Support/Resistance: {signal.get('supportResistance', 'N/A')}
                    Analysis: {signal.get('analysis', 'N/A')}
                    
                    Create a short, engaging TikTok video script with:
                    1. Catchy intro (2-3 lines)
                    2. Key analysis points (2-3 lines)
                    3. Keep it simple and direct
                    4. Use emojis sparingly
                    5. Total 4-6 lines
                    6. Split into 2 parts with \n\n between them
                """
            }

            # Debug log
            logger.info(f"Token info prepared: {token_info['token']}, mint: {token_info.get('mint')}")

            # Use the standard analysis function
            response = analyze_charts_with_claude(
                chart_paths=[],  # No charts needed for script generation
                token_info=token_info
            )
            
            if not response or 'overall' not in response:
                logger.warning("No script generated by Claude")
                return None
                
            return response['overall']['analysis']
            
        except Exception as e:
            logger.error(f"Error generating script: {e}")
            return None

async def main():
    try:
        # Verify environment variables
        required_vars = [
            'KINKONG_AIRTABLE_BASE_ID',
            'KINKONG_AIRTABLE_API_KEY',
            'ANTHROPIC_API_KEY'
        ]
        
        missing = [var for var in required_vars if not os.getenv(var)]
        if missing:
            raise ValueError(f"Missing environment variables: {', '.join(missing)}")

        # Generate script
        generator = PromptGenerator()
        signal = generator.get_latest_signal()
        
        if signal:
            script = await generator.generate_video_script(signal)
            if script:
                print("\nGenerated Video Script:")
                print("=====================")
                print(script)
                return script
            else:
                logger.error("Failed to generate script")
        else:
            logger.error("No suitable signal found")

    except Exception as e:
        logger.error(f"Fatal error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
